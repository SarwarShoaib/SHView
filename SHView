//
//  SHView.swift
//  SHView
//
//  Created by Shoaib Sarwar Cheema on 05/09/2017.
//  Copyright Â© 2017. All rights reserved.
//


import UIKit

class SHView: UIView {
    
    fileprivate var isGone = false
    fileprivate var heightBeforeGone : CGFloat = 0
    fileprivate var topBeforeGone : CGFloat = 0
    
    //implimented in processing of notification
    var gone:Bool {
        
        set(gone){
            endEditing(true)
            if gone && !isGone{
                heightBeforeGone = height
                height = 0
                //                possition from top
                topBeforeGone = top
                top = 0
            }
            else if !gone{
                height = heightBeforeGone
                top = topBeforeGone
            }
            isGone = gone
            
            self.updateConstraintsIfNeeded()
        }
        get {
            return isGone
        }
        
    }
    
    fileprivate var constraintBased = false
    
    var top: CGFloat {
        set(value) {
            if let constraints = superview?.constraints {
                for constraint in constraints {
                    
                    if (constraint.firstAttribute == .top && constraint.firstItem as! NSObject == self) || (constraint.secondAttribute == .top && constraint.secondItem as! NSObject == self) {
                        constraint.constant = value;
                        
                        return
                    }
                }
            }
        }
        get {
            if let constraints = superview?.constraints {
                for constraint in constraints {
                    
                    if (constraint.firstAttribute == .top && constraint.firstItem as! NSObject == self) || (constraint.secondAttribute == .top && constraint.secondItem as! NSObject == self) {
                        
                        //                if constraint.firstAttribute == .top {
                        return constraint.constant
                    }
                }
            }
            
            return 0
        }
    }
    
    var height:CGFloat {
        
        set(value){
            let constraints = self.constraints
            
            for constraint in constraints {
                
                if constraint.firstAttribute == .height {
                    constraint.constant = value;
                    
                    return
                }
            }
            
            self.translatesAutoresizingMaskIntoConstraints = false
            
            var views: [String: AnyObject] = [:]
            views["field"] = self
            
            let constVH = NSLayoutConstraint.constraints(withVisualFormat: "V:[field(\(height))]", options: [], metrics: nil, views: views)
            
            self.addConstraints(constVH)
        }
        get {
            let constraints = self.constraints
            
            for constraint in constraints {
                
                if constraint.firstAttribute == .height {
                    return constraint.constant
                }
            }
            return 0
        }
        
    }
}
